import sqlite3
from IPython.display import display, HTML

conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

# HTML for the frontend
html_code = """
<!DOCTYPE html>
<html>
<head>
<title>Product CRUD</title>
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
</style>
</head>
<body>

<h1>Product CRUD Operations</h1>

<h2>Create Product</h2>
<form id="create_form">
  Name: <input type="text" id="create_name"><br>
  Price: <input type="number" id="create_price"><br>
  <button type="button" onclick="createProduct()">Create</button>
</form>

<h2>Read Products</h2>
<div id="read_products"></div>


<h2>Update Product</h2>
<form id="update_form">
    ID: <input type="number" id="update_id"><br>
    New Name: <input type="text" id="update_name"><br>
    New Price: <input type="number" id="update_price"><br>
    <button type="button" onclick="updateProduct()">Update</button>
</form>

<h2>Delete Product</h2>
<form id="delete_form">
  ID: <input type="number" id="delete_id"><br>
  <button type="button" onclick="deleteProduct()">Delete</button>
</form>


<script>
function createProduct() {
  const name = document.getElementById('create_name').value;
  const price = document.getElementById('create_price').value;
  google.colab.kernel.invokeFunction('create_product', [name, price], {});
}


function updateProduct() {
  const id = document.getElementById('update_id').value;
  const name = document.getElementById('update_name').value;
  const price = document.getElementById('update_price').value;
  google.colab.kernel.invokeFunction('update_product', [id, name, price], {});
  readProducts();
}

function deleteProduct() {
    const id = document.getElementById('delete_id').value;
    google.colab.kernel.invokeFunction('delete_product', [id], {});
    readProducts();
}


function readProducts() {
    google.colab.kernel.invokeFunction('read_products', [], {
    }).then(result => {
        const products = result.data['application/json'];
        let html = '<table><tr><th>ID</th><th>Name</th><th>Price</th></tr>';
        products.forEach(product => {
          html += `<tr><td>${product[0]}</td><td>${product[1]}</td><td>${product[2]}</td></tr>`;
        });
        html += '</table>';
        document.getElementById('read_products').innerHTML = html;
    })
}

readProducts(); // Initial load of products


</script>
</body>
</html>
"""
display(HTML(html_code))

# Python functions exposed to JavaScript
def create_product(name, price):
    cursor.execute("INSERT INTO products (name, price) VALUES (?, ?)", (name, price))
    conn.commit()
    return


def read_products():
  cursor.execute("SELECT * FROM products")
  return cursor.fetchall()

def update_product(id, name, price):
    cursor.execute("UPDATE products SET name = ?, price = ? WHERE id = ?", (name, price, id))
    conn.commit()
    return
    
def delete_product(id):
  cursor.execute("DELETE FROM products WHERE id = ?", (id,))
  conn.commit()
  return

# Register the functions
from google.colab import output
output.register_callback('create_product', create_product)
output.register_callback('read_products', read_products)
output.register_callback('update_product', update_product)
output.register_callback('delete_product', delete_product)
